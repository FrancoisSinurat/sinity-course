[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# ==========================\n# CONTENT BASED FILTERING",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "course_df",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "course_df = pd.read_csv(\"dataset-fix-SinityCourse/Coursera_courses.csv\")\ncourse_df.drop(columns=['institution', 'course_url'], inplace=True, errors='ignore')\ncourse_df = course_df.dropna(subset=[\"name\"])\ncourse_df[\"name\"] = course_df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\n# Transform `course_id` menjadi unique integer tetapi tetap menggunakan nama `course_id`\nlabel_encoder = LabelEncoder()\ncourse_df[\"course_id\"] = label_encoder.fit_transform(course_df[\"course_id\"])\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(course_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "course_df",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "course_df = course_df.dropna(subset=[\"name\"])\ncourse_df[\"name\"] = course_df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\n# Transform `course_id` menjadi unique integer tetapi tetap menggunakan nama `course_id`\nlabel_encoder = LabelEncoder()\ncourse_df[\"course_id\"] = label_encoder.fit_transform(course_df[\"course_id\"])\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(course_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncourse_df.to_csv(\"final_courses.csv\", index=False)\nprint(\"final_courses.csv has been saved!\")",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "course_df[\"name\"]",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "course_df[\"name\"] = course_df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\n# Transform `course_id` menjadi unique integer tetapi tetap menggunakan nama `course_id`\nlabel_encoder = LabelEncoder()\ncourse_df[\"course_id\"] = label_encoder.fit_transform(course_df[\"course_id\"])\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(course_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncourse_df.to_csv(\"final_courses.csv\", index=False)\nprint(\"final_courses.csv has been saved!\")\n# ==========================",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "label_encoder",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "label_encoder = LabelEncoder()\ncourse_df[\"course_id\"] = label_encoder.fit_transform(course_df[\"course_id\"])\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(course_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncourse_df.to_csv(\"final_courses.csv\", index=False)\nprint(\"final_courses.csv has been saved!\")\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "course_df[\"course_id\"]",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "course_df[\"course_id\"] = label_encoder.fit_transform(course_df[\"course_id\"])\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(course_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncourse_df.to_csv(\"final_courses.csv\", index=False)\nprint(\"final_courses.csv has been saved!\")\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "vectorizer",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "vectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(course_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncourse_df.to_csv(\"final_courses.csv\", index=False)\nprint(\"final_courses.csv has been saved!\")\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "tfidf_matrix",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "tfidf_matrix = vectorizer.fit_transform(course_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncourse_df.to_csv(\"final_courses.csv\", index=False)\nprint(\"final_courses.csv has been saved!\")\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):\n    course_name = course_name.lower().strip()",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "cosine_sim_matrix",
        "kind": 5,
        "importPath": "CBF",
        "description": "CBF",
        "peekOfCode": "cosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncourse_df.to_csv(\"final_courses.csv\", index=False)\nprint(\"final_courses.csv has been saved!\")\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):\n    course_name = course_name.lower().strip()\n    matched_courses = course_df[course_df[\"name\"].str.contains(course_name, case=False, na=False)]",
        "detail": "CBF",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# ==========================\n# 1️⃣ Load Dataset",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "courses_df",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "courses_df = pd.read_csv(\"dataset-fix-SinityCourse/Coursera_courses.csv\")\ncourses_df.drop(columns=['institution', 'course_url'], inplace=True, errors='ignore')\ncourses_df = courses_df.dropna(subset=[\"name\"])\ncourses_df[\"name\"] = courses_df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\n# Dataset user review (collaborative filtering)\nreviews_df = pd.read_csv(\"dataset-fix-SinityCourse/Coursera_reviews.csv\")\nreviews_df.drop(columns='date_reviews', inplace=True, errors='ignore')\n# Batasi jumlah review menjadi maksimal 10.000 sampel\nif len(reviews_df) > 10000:\n    reviews_df = reviews_df.sample(n=10000, random_state=42)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "courses_df",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "courses_df = courses_df.dropna(subset=[\"name\"])\ncourses_df[\"name\"] = courses_df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\n# Dataset user review (collaborative filtering)\nreviews_df = pd.read_csv(\"dataset-fix-SinityCourse/Coursera_reviews.csv\")\nreviews_df.drop(columns='date_reviews', inplace=True, errors='ignore')\n# Batasi jumlah review menjadi maksimal 10.000 sampel\nif len(reviews_df) > 10000:\n    reviews_df = reviews_df.sample(n=10000, random_state=42)\n# Pastikan `course_id` awalnya string\ncourses_df[\"course_id\"] = courses_df[\"course_id\"].astype(str)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "courses_df[\"name\"]",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "courses_df[\"name\"] = courses_df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\n# Dataset user review (collaborative filtering)\nreviews_df = pd.read_csv(\"dataset-fix-SinityCourse/Coursera_reviews.csv\")\nreviews_df.drop(columns='date_reviews', inplace=True, errors='ignore')\n# Batasi jumlah review menjadi maksimal 10.000 sampel\nif len(reviews_df) > 10000:\n    reviews_df = reviews_df.sample(n=10000, random_state=42)\n# Pastikan `course_id` awalnya string\ncourses_df[\"course_id\"] = courses_df[\"course_id\"].astype(str)\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(str)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "reviews_df",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "reviews_df = pd.read_csv(\"dataset-fix-SinityCourse/Coursera_reviews.csv\")\nreviews_df.drop(columns='date_reviews', inplace=True, errors='ignore')\n# Batasi jumlah review menjadi maksimal 10.000 sampel\nif len(reviews_df) > 10000:\n    reviews_df = reviews_df.sample(n=10000, random_state=42)\n# Pastikan `course_id` awalnya string\ncourses_df[\"course_id\"] = courses_df[\"course_id\"].astype(str)\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(str)\n# ==========================\n# 2️⃣ Label Encoding `course_id`",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "courses_df[\"course_id\"]",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "courses_df[\"course_id\"] = courses_df[\"course_id\"].astype(str)\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(str)\n# ==========================\n# 2️⃣ Label Encoding `course_id`\n# ==========================\nlabel_encoder = LabelEncoder()\ncourses_df[\"course_id\"] = label_encoder.fit_transform(courses_df[\"course_id\"])\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].map(lambda x: label_encoder.transform([x])[0] if x in label_encoder.classes_ else None)\n# Hapus baris dengan `course_id` yang tidak valid\nreviews_df.dropna(subset=[\"course_id\"], inplace=True)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "reviews_df[\"course_id\"]",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "reviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(str)\n# ==========================\n# 2️⃣ Label Encoding `course_id`\n# ==========================\nlabel_encoder = LabelEncoder()\ncourses_df[\"course_id\"] = label_encoder.fit_transform(courses_df[\"course_id\"])\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].map(lambda x: label_encoder.transform([x])[0] if x in label_encoder.classes_ else None)\n# Hapus baris dengan `course_id` yang tidak valid\nreviews_df.dropna(subset=[\"course_id\"], inplace=True)\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(int)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "label_encoder",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "label_encoder = LabelEncoder()\ncourses_df[\"course_id\"] = label_encoder.fit_transform(courses_df[\"course_id\"])\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].map(lambda x: label_encoder.transform([x])[0] if x in label_encoder.classes_ else None)\n# Hapus baris dengan `course_id` yang tidak valid\nreviews_df.dropna(subset=[\"course_id\"], inplace=True)\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(int)\n# ==========================\n# 3️⃣ Content-Based Filtering\n# ==========================\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "courses_df[\"course_id\"]",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "courses_df[\"course_id\"] = label_encoder.fit_transform(courses_df[\"course_id\"])\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].map(lambda x: label_encoder.transform([x])[0] if x in label_encoder.classes_ else None)\n# Hapus baris dengan `course_id` yang tidak valid\nreviews_df.dropna(subset=[\"course_id\"], inplace=True)\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(int)\n# ==========================\n# 3️⃣ Content-Based Filtering\n# ==========================\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(courses_df[\"name\"])",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "reviews_df[\"course_id\"]",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "reviews_df[\"course_id\"] = reviews_df[\"course_id\"].map(lambda x: label_encoder.transform([x])[0] if x in label_encoder.classes_ else None)\n# Hapus baris dengan `course_id` yang tidak valid\nreviews_df.dropna(subset=[\"course_id\"], inplace=True)\nreviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(int)\n# ==========================\n# 3️⃣ Content-Based Filtering\n# ==========================\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(courses_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "reviews_df[\"course_id\"]",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "reviews_df[\"course_id\"] = reviews_df[\"course_id\"].astype(int)\n# ==========================\n# 3️⃣ Content-Based Filtering\n# ==========================\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(courses_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 4️⃣ Collaborative Filtering\n# ==========================",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "vectorizer",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "vectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(courses_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 4️⃣ Collaborative Filtering\n# ==========================\n# Buat `user_id` unik berdasarkan reviewers\nlabel_encoder_user = LabelEncoder()\nreviews_df[\"user_id\"] = label_encoder_user.fit_transform(reviews_df[\"reviewers\"]).astype(str)\n# Buat matriks rating pengguna terhadap kursus",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "tfidf_matrix",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "tfidf_matrix = vectorizer.fit_transform(courses_df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 4️⃣ Collaborative Filtering\n# ==========================\n# Buat `user_id` unik berdasarkan reviewers\nlabel_encoder_user = LabelEncoder()\nreviews_df[\"user_id\"] = label_encoder_user.fit_transform(reviews_df[\"reviewers\"]).astype(str)\n# Buat matriks rating pengguna terhadap kursus\nuser_course_matrix = reviews_df.pivot_table(index=\"user_id\", columns=\"course_id\", values=\"rating\").fillna(0)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "cosine_sim_matrix",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "cosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 4️⃣ Collaborative Filtering\n# ==========================\n# Buat `user_id` unik berdasarkan reviewers\nlabel_encoder_user = LabelEncoder()\nreviews_df[\"user_id\"] = label_encoder_user.fit_transform(reviews_df[\"reviewers\"]).astype(str)\n# Buat matriks rating pengguna terhadap kursus\nuser_course_matrix = reviews_df.pivot_table(index=\"user_id\", columns=\"course_id\", values=\"rating\").fillna(0)\n# Hitung similaritas antar pengguna menggunakan cosine similarity",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "label_encoder_user",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "label_encoder_user = LabelEncoder()\nreviews_df[\"user_id\"] = label_encoder_user.fit_transform(reviews_df[\"reviewers\"]).astype(str)\n# Buat matriks rating pengguna terhadap kursus\nuser_course_matrix = reviews_df.pivot_table(index=\"user_id\", columns=\"course_id\", values=\"rating\").fillna(0)\n# Hitung similaritas antar pengguna menggunakan cosine similarity\nuser_similarity = cosine_similarity(user_course_matrix)\nuser_similarity_df = pd.DataFrame(user_similarity, index=user_course_matrix.index, columns=user_course_matrix.index)\n# ==========================\n# 5️⃣ Hybrid Recommendation API\n# ==========================",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "reviews_df[\"user_id\"]",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "reviews_df[\"user_id\"] = label_encoder_user.fit_transform(reviews_df[\"reviewers\"]).astype(str)\n# Buat matriks rating pengguna terhadap kursus\nuser_course_matrix = reviews_df.pivot_table(index=\"user_id\", columns=\"course_id\", values=\"rating\").fillna(0)\n# Hitung similaritas antar pengguna menggunakan cosine similarity\nuser_similarity = cosine_similarity(user_course_matrix)\nuser_similarity_df = pd.DataFrame(user_similarity, index=user_course_matrix.index, columns=user_course_matrix.index)\n# ==========================\n# 5️⃣ Hybrid Recommendation API\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "user_course_matrix",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "user_course_matrix = reviews_df.pivot_table(index=\"user_id\", columns=\"course_id\", values=\"rating\").fillna(0)\n# Hitung similaritas antar pengguna menggunakan cosine similarity\nuser_similarity = cosine_similarity(user_course_matrix)\nuser_similarity_df = pd.DataFrame(user_similarity, index=user_course_matrix.index, columns=user_course_matrix.index)\n# ==========================\n# 5️⃣ Hybrid Recommendation API\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def hybrid_recommendation(user_id: str = Query(..., title=\"User ID\"), course_name: str = Query(None, title=\"Nama Kursus\")):\n    recommendations = []",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "user_similarity",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "user_similarity = cosine_similarity(user_course_matrix)\nuser_similarity_df = pd.DataFrame(user_similarity, index=user_course_matrix.index, columns=user_course_matrix.index)\n# ==========================\n# 5️⃣ Hybrid Recommendation API\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def hybrid_recommendation(user_id: str = Query(..., title=\"User ID\"), course_name: str = Query(None, title=\"Nama Kursus\")):\n    recommendations = []\n    # **1️⃣ Content-Based Filtering**\n    if course_name:",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "user_similarity_df",
        "kind": 5,
        "importPath": "NEW-HYBRID",
        "description": "NEW-HYBRID",
        "peekOfCode": "user_similarity_df = pd.DataFrame(user_similarity, index=user_course_matrix.index, columns=user_course_matrix.index)\n# ==========================\n# 5️⃣ Hybrid Recommendation API\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def hybrid_recommendation(user_id: str = Query(..., title=\"User ID\"), course_name: str = Query(None, title=\"Nama Kursus\")):\n    recommendations = []\n    # **1️⃣ Content-Based Filtering**\n    if course_name:\n        course_name = course_name.lower().strip()",
        "detail": "NEW-HYBRID",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # Bisa diubah ke [\"http://localhost:3000\"] untuk keamanan\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# ==========================\n# CONTENT BASED FILTERING",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "df = pd.read_csv(\"clean_courses.csv\")\ndf = df.dropna(subset=[\"name\"])\ndf[\"name\"] = df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "df = df.dropna(subset=[\"name\"])\ndf[\"name\"] = df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "df[\"name\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "df[\"name\"] = df[\"name\"].astype(str).apply(lambda x: x.replace('\"', '').replace(\"'\", \"\").strip().lower())\nvectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):\n    course_name = course_name.lower().strip()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "vectorizer",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "vectorizer = TfidfVectorizer(stop_words=\"english\", ngram_range=(2, 2))\ntfidf_matrix = vectorizer.fit_transform(df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):\n    course_name = course_name.lower().strip()\n    matched_courses = df[df[\"name\"].str.contains(course_name, case=False, na=False)]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "tfidf_matrix",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "tfidf_matrix = vectorizer.fit_transform(df[\"name\"])\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):\n    course_name = course_name.lower().strip()\n    matched_courses = df[df[\"name\"].str.contains(course_name, case=False, na=False)]\n    if matched_courses.empty:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "cosine_sim_matrix",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "cosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n# ==========================\n# 2️⃣ API Endpoint untuk Rekomendasi\n# ==========================\n@app.get(\"/dashboard\", response_model=dict)\nasync def recommend_courses(course_name: str = Query(..., title=\"Nama Kursus\")):\n    course_name = course_name.lower().strip()\n    matched_courses = df[df[\"name\"].str.contains(course_name, case=False, na=False)]\n    if matched_courses.empty:\n        return {\"message\": f\"Kursus '{course_name}' tidak ditemukan. Coba cari yang lain.\", \"recommendations\": []}",
        "detail": "app",
        "documentation": {}
    }
]